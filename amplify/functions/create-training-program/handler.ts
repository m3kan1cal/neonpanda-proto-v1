import { createOkResponse, createErrorResponse } from '../libs/api-helpers';
import { saveTrainingProgram } from '../../dynamodb/operations';
import { storeTrainingProgramDetailsInS3 } from '../libs/training-program/s3-utils';
import { calculateEndDate } from '../libs/training-program/calendar-utils';
import { TrainingProgram, CreateTrainingProgramEvent } from '../libs/training-program/types';
import { withAuth, AuthenticatedHandler } from '../libs/auth/middleware';

const baseHandler: AuthenticatedHandler = async (event) => {
  try {
    // Auth handled by middleware - userId is already validated
    const userId = event.user.userId;
    const coachId = event.pathParameters?.coachId;

    if (!coachId) {
      return createErrorResponse(400, 'coachId is required');
    }

    if (!event.body) {
      return createErrorResponse(400, 'Request body is required');
    }

    const body: CreateTrainingProgramEvent = JSON.parse(event.body);

    // Validate required fields
    if (!body.name || !body.totalDays || !body.trainingFrequency || !body.startDate) {
      return createErrorResponse(400, 'Missing required fields: name, totalDays, trainingFrequency, startDate');
    }

    if (!body.phases || body.phases.length === 0) {
      return createErrorResponse(400, 'At least one phase is required');
    }

    // Generate program ID (consistent with workout/conversation pattern)
    const shortId = Math.random().toString(36).substring(2, 11);
    const programId = `program_${userId}_${Date.now()}_${shortId}`;

    // Calculate program dates
    const endDate = calculateEndDate(body.startDate, body.totalDays);

    // Process phases and add startDay/endDay
    let currentDayOffset = 1;
    const phases = body.phases.map((phase, index) => {
      const phaseId = `phase_${index + 1}`;
      const startDay = currentDayOffset;
      const endDay = startDay + phase.durationDays - 1;
      currentDayOffset = endDay + 1;

      return {
        phaseId,
        name: phase.name,
        description: phase.description,
        startDay,
        endDay,
        durationDays: phase.durationDays,
        focusAreas: phase.focusAreas,
      };
    });

    // Note: Daily workouts will be generated by AI in Phase 2
    // For now, we create the program structure and store the context in S3
    // The AI generation will populate the workout templates later

    // Store initial training program details in S3 with context (empty templates for now)
    const s3DetailKey = await storeTrainingProgramDetailsInS3(
      programId,
      userId,
      coachId,
      [], // Empty workout templates - will be populated by AI in Phase 2
      {
        goals: body.trainingGoals || [],
        purpose: body.description || `${body.trainingFrequency}x per week training program`,
        successMetrics: [], // Will be defined during AI generation
        equipmentConstraints: body.equipmentConstraints || [],
        userContext: body.userContext,
      },
      {
        generatedBy: 'user-manual-creation',
        aiModel: 'n/a',
        confidence: 1.0,
        generationPrompt: 'User-created program structure awaiting AI workout generation',
      }
    );

    // Create training program entity
    const trainingProgram: TrainingProgram = {
      programId,
      userId,
      coachId,
      creationConversationId: body.conversationId || '',
      name: body.name,
      description: body.description,
      status: 'active',
      startDate: body.startDate,
      endDate,
      totalDays: body.totalDays,
      currentDay: 1,
      pausedAt: null,
      pausedDuration: 0,
      phases,
      equipmentConstraints: body.equipmentConstraints || [],
      trainingGoals: body.trainingGoals || [],
      trainingFrequency: body.trainingFrequency,
      totalWorkouts: 0, // Will be set when workouts are generated
      completedWorkouts: 0,
      skippedWorkouts: 0,
      adherenceRate: 0,
      dayCompletionStatus: {},
      lastActivityDate: new Date(),
      s3DetailKey, // S3 key for program details
      adaptationLog: [],
      // createdAt/updatedAt provided by DynamoDBItem wrapper
    };

    // Store in DynamoDB
    await saveTrainingProgram(trainingProgram);

    console.info('Training program created successfully:', {
      programId,
      userId,
      coachId,
      name: body.name,
      totalDays: body.totalDays,
      phaseCount: phases.length,
    });

    return createOkResponse({
      success: true,
      programId,
      program: trainingProgram,
      message: 'Training program created successfully. Daily workouts will be generated next.',
    });
  } catch (error) {
    console.error('Error creating training program:', error);
    return createErrorResponse(500, 'Failed to create training program', error);
  }
};

export const handler = withAuth(baseHandler);
